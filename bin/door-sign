#! /usr/bin/env ruby

require 'rubygems'
require 'google_calendar'
require 'ruby_spark'
require 'active_support/all'

# Array of Google Calendar Names to check
# TODO: Customize for my calendar
CALENDARS = {
  'School' => 'alexforey.com_pkbcsa4uk7jtog8tkj65hndpn8@group.calendar.google.com',
  'Home' => 'alexforey.com_g0l2pjg9tbevhr066glf4ub6mc@group.calendar.google.com',
  'Work' => 'alexforey.com_d51bdglmg2o9t0nk86ce8vcqik@group.calendar.google.com',
  'SPS Film' => 'ki1vv5ieoeljjtvh7ihumje7go@group.calendar.google.com',
  'Lessons' => 'alexforey.com_9rcvmgk971lv19biuqku4bla98@group.calendar.google.com'
}

def calendar(id)
  cal = Google::Calendar.new(
    :client_id     => ENV['CLIENT_ID'],
    :client_secret => ENV['CLIENT_SECRET'],
    :calendar      => id,
    :redirect_url  => "urn:ietf:wg:oauth:2.0:oob" # this is what Google uses for 'applications'
  )

  cal.login_with_refresh_token(ENV['REFRESH_TOKEN'])

  return cal
end

# Find out which events are happening right now
def events_now

  # Open empty array
  events = []

  # Loop over all the calendars
  CALENDARS.each do |name, id|

    # Get the events
    cal_events = calendar(id).find_events_in_range(Time.now, Time.now + 60)

    # Loop over each one and add it to the array
    cal_events.each do |e|
      events << {event: e, cal: name} unless e.nil?
    end

  end

  # Return the final list
  return events

end

##### Main Script #####



# Get the events
events = events_now

# Time for backlight and is at work purposes
now = Time.now.in_time_zone("New York")

# Are there more than one going on at the same time?
if events.length != 0

  # Yes, pick one entirely at random
  event = events.sample

end

# Did we end up with an event?
if event
  # Yes, so build the payload with "|" between each part
  payload = "Chris is at:|#{event[:event].title}|#{event[:event].location}|(#{event[:cal]} Calendar)"
else
  if now.hour >= 18 or now.hour <= 9
    payload = "Chris is not at work, check back at 9!"
  else 
    # No, so say we're not busy
    payload = "Chris is currently| | Not busy| "

  end
end

# Initalise the core
core = RubySpark::Core.new(ENV['SPARK_ID'], ENV['SPARK_TOKEN'])

# Send the text to the core
core.function("update", payload)

# Compare them for backlight
if now.hour >= 22 or now.hour <= 7

  # Turn it off at night
  core.function("backlight", "off")

else

  # Turn it on during the day
  core.function("backlight", "on")

end
